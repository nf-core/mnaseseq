/*
 * -------------------------------------------------
 *  nf-core/mnaseseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// From nextflow version 22.04.0, DSL1 becomes the default mode
// see here: https://www.nextflow.io/blog/2022/evolution-of-nextflow-runtime.html
nextflow.enable.dsl = 1

// Global default params, used in configs
params {

  // Options: Generic
  single_end = false
  seq_center = false
  fragment_size = 150
  fingerprint_bins = 500000

  // Options: References
  genome = false
  tss_bed = false
  save_reference = false

  // Options: Trimming
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  trim_nextseq = 0
  skip_trimming = false
  save_trimmed = false

  // Options: Alignments
  min_insert = 100
  max_insert = 200
  max_mismatch = 4
  keep_dups = false
  keep_multi_map = false
  skip_merge_replicates = false
  save_align_intermeds = false

  // Options: QC
  skip_fastqc = false
  skip_picard_metrics = false
  skip_preseq = false
  skip_plot_profile = false
  skip_plot_fingerprint = false
  skip_danpos = false
  skip_igv = false
  skip_multiqc = false

  // Options: Config
  multiqc_config = false
  bamtools_filter_pe_config = "$baseDir/assets/bamtools_filter_pe.json"
  bamtools_filter_se_config = "$baseDir/assets/bamtools_filter_se.json"

  // Options: Custom config
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Options: Other
  help = false
  outdir = './results'
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  igenomes_ignore = false
  max_multiqc_email_size = 25.MB
  tracedir = "${params.outdir}/pipeline_info"
  email = false
  email_on_fail = false
  plaintext_email = false
  monochrome_logs = false
  name = false
  hostnames = false
  clusterOptions = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/mnaseseq:1.0.0'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Increase time available to build conda environment
conda { createTimeout = "60 min" }

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/mnaseseq'
  author = 'Harshil Patel'
  homePage = 'https://github.com/nf-core/mnaseseq'
  description = 'MNase-seq analysis pipeline using BWA and DANPOS2.'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
